#!/bin/bash

# Form Builder Testing Script
# This script helps verify that the form builder functionality works correctly

echo "ðŸ§ª Form Builder Configuration Test"
echo "================================="

echo "âœ… 1. Testing build process..."
npm run build > /dev/null 2>&1
if [ $? -eq 0 ]; then
    echo "   âœ“ Build successful"
else
    echo "   âœ— Build failed"
    exit 1
fi

echo "âœ… 2. Checking form configuration files..."
if [ -f "src/payload.config.ts" ]; then
    echo "   âœ“ Payload config exists"
    if grep -q "formBuilderPlugin" src/payload.config.ts; then
        echo "   âœ“ Form builder plugin configured"
    else
        echo "   âœ— Form builder plugin not found"
    fi
else
    echo "   âœ— Payload config missing"
fi

echo "âœ… 3. Checking BookADemo block configuration..."
if [ -f "src/blocks/BookADemo.ts" ]; then
    echo "   âœ“ BookADemo block exists"
    if grep -q "relationTo: 'forms'" src/blocks/BookADemo.ts; then
        echo "   âœ“ Form relationship configured"
    else
        echo "   âœ— Form relationship not found"
    fi
else
    echo "   âœ— BookADemo block missing"
fi

echo "âœ… 4. Checking BookADemo component implementation..."
COMPONENT_FILE="src/app/(frontend)/Components/blocks/BookADemoBlock.tsx"
if [ -f "$COMPONENT_FILE" ]; then
    echo "   âœ“ BookADemo component exists"
    if grep -q "Fallback to hardcoded fields" "$COMPONENT_FILE"; then
        echo "   âœ“ Hardcoded fallback implemented"
    else
        echo "   âœ— Hardcoded fallback not found"
    fi
    if grep -q "Dynamic validation based on form fields" "$COMPONENT_FILE"; then
        echo "   âœ“ Dynamic validation implemented"
    else
        echo "   âœ— Dynamic validation not found"
    fi
else
    echo "   âœ— BookADemo component missing"
fi

echo "âœ… 5. Checking API endpoints..."
if [ -f "src/app/api/forms/[id]/route.ts" ]; then
    echo "   âœ“ Form fetch API exists"
else
    echo "   âœ— Form fetch API missing"
fi

if [ -f "src/app/api/form-submissions/route.ts" ]; then
    echo "   âœ“ Form submission API exists"
else
    echo "   âœ— Form submission API missing"
fi

echo ""
echo "ðŸŽ‰ Configuration Test Complete!"
echo ""
echo "ðŸ“‹ Manual Testing Checklist:"
echo "1. Start the development server: npm run dev"
echo "2. Navigate to admin panel: http://localhost:3000/admin"
echo "3. Create a new form in the Forms section"
echo "4. Add various field types (text, email, select, etc.)"
echo "5. Create a page with a BookADemo block"
echo "6. Test both scenarios:"
echo "   - With a form selected (dynamic fields)"
echo "   - With no form selected (hardcoded fallback)"
echo "7. Verify form submissions work correctly"
echo "8. Check that form fields can be edited after creation"
echo ""
echo "ðŸ”§ Key Features to Test:"
echo "- âœ… Form field editing after creation"
echo "- âœ… Multiple field types support"
echo "- âœ… Hardcoded fallback functionality"
echo "- âœ… Form validation for all field types"
echo "- âœ… Form submission handling"
echo "- âœ… Admin UI improvements"
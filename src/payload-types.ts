/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    pages: Page;
    forms: Form;
    'form-submissions': FormSubmission;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    navbar: Navbar;
  };
  globalsSelect: {
    navbar: NavbarSelect<false> | NavbarSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    card?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  title: string;
  /**
   * This will be the URL path for this page (e.g., "home", "contact-us", "about-us")
   */
  slug: string;
  /**
   * SEO title for this page
   */
  metaTitle?: string | null;
  /**
   * SEO description for this page
   */
  metaDescription?: string | null;
  /**
   * Drag and drop to reorder sections
   */
  content: (
    | {
        title: string;
        subtitle?: string | null;
        backgroundImage?: (number | null) | Media;
        id?: string | null;
        blockName?: string | null;
        blockType: 'hero';
      }
    | {
        preText: string;
        highlightText: string;
        postText: string;
        subtitle?: string | null;
        logos: {
          logo: number | Media;
          id?: string | null;
        }[];
        id?: string | null;
        blockName?: string | null;
        blockType: 'trusted-by';
      }
    | {
        heading: string;
        subheading?: string | null;
        features: {
          title: string;
          description: string;
          iconType: 'upload' | 'url' | 'lucide' | 'iconify';
          /**
           * Upload an image or SVG file for the icon
           */
          iconUpload?: (number | null) | Media;
          /**
           * Enter a URL to an icon/image
           */
          iconUrl?: string | null;
          /**
           * Enter a Lucide icon name (e.g., "User", "Search", "Settings")
           */
          lucideIcon?: string | null;
          /**
           * Enter an Iconify icon name (e.g., "mdi:account", "heroicons:search", "ph:gear")
           */
          iconifyIcon?: string | null;
          id?: string | null;
        }[];
        backgroundColor?: ('white' | 'gray-50' | 'teal-50') | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'features';
      }
    | {
        /**
         * First part of the heading (before animated text)
         */
        heading: string;
        /**
         * Text that appears after the animated platform names
         */
        subheading: string;
        animatedPlatforms: {
          /**
           * Platform name that will appear in animation (e.g., Web, Android, iOS)
           */
          platform: string;
          id?: string | null;
        }[];
        /**
         * Description text below the heading
         */
        description?: string | null;
        platformIcons?:
          | {
              platform: string;
              /**
               * Iconify icon name (e.g., logos:chrome, logos:google-play-icon)
               */
              iconName: string;
              id?: string | null;
            }[]
          | null;
        /**
         * Image showing devices (laptop and phone mockups)
         */
        deviceImage?: (number | null) | Media;
        /**
         * How long each platform name is displayed before switching
         */
        animationSpeed?: number | null;
        backgroundColor?: ('white' | 'gray-50' | 'blue-50') | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'platform';
      }
    | {
        /**
         * Optional heading for the highlights section
         */
        heading?: string | null;
        /**
         * Optional subheading or description for the highlights section
         */
        subheading?: string | null;
        /**
         * Enter an Iconify icon name that will be used for all highlight items (e.g., "mdi:check-circle", "heroicons:check-circle")
         */
        globalIcon: string;
        highlights: {
          title: string;
          description: string;
          id?: string | null;
        }[];
        backgroundColor?: ('white' | 'gray-50' | 'teal-50') | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'highlights';
      }
    | {
        /**
         * Main heading for the testimonials section
         */
        heading?: string | null;
        /**
         * Optional subheading or description
         */
        subheading?: string | null;
        testimonials: {
          /**
           * The testimonial text from the customer (max 150 characters)
           */
          quote: string;
          /**
           * Rating out of 5 stars
           */
          rating: number;
          authorName: string;
          authorTitle?: string | null;
          company?: string | null;
          id?: string | null;
        }[];
        backgroundColor?: ('white' | 'gray-50' | 'teal-50') | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'testimonials';
      }
    | {
        heading?: string | null;
        description?: string | null;
        features?:
          | {
              title: string;
              description: string;
              iconType: 'upload' | 'url' | 'lucide' | 'iconify';
              iconUpload?: (number | null) | Media;
              iconUrl?: string | null;
              lucideIcon?: string | null;
              iconifyIcon?: string | null;
              id?: string | null;
            }[]
          | null;
        formHeading?: string | null;
        /**
         * Choose a form created with the Form Builder plugin. Leave empty to use default fields.
         */
        form?: (number | null) | Form;
        backgroundColor?: ('white' | 'gray-50') | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'book-demo';
      }
    | {
        form: number | Form;
        /**
         * Submit form without page reload
         */
        enableAjax?: boolean | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'form-block';
      }
    | {
        /**
         * Main call-to-action heading
         */
        mainHeading: string;
        ctaButton: {
          text: string;
          /**
           * Link destination for the button
           */
          url?: string | null;
        };
        socialLinks?: {
          heading?: string | null;
          links?:
            | {
                /**
                 * e.g., LinkedIn, Instagram, Facebook
                 */
                platform: string;
                url: string;
                id?: string | null;
              }[]
            | null;
        };
        contactInfo?: {
          heading?: string | null;
          email?: string | null;
          phone?: string | null;
          address?: string | null;
        };
        footerBottom?: {
          copyrightText?: string | null;
          designCredit?: string | null;
        };
        backgroundColor?: ('teal-gradient' | 'dark-green' | 'custom-teal') | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'footer';
      }
  )[];
  status?: ('draft' | 'published') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: number;
  title: string;
  fields?:
    | (
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            defaultValue?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'checkbox';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'country';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'email';
          }
        | {
            message?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'message';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'number';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            placeholder?: string | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'select';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'state';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
      )[]
    | null;
  submitButtonLabel?: string | null;
  /**
   * Choose whether to display an on-page message or redirect to a different page after they submit the form.
   */
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirect?: {
    url: string;
  };
  /**
   * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
   */
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        /**
         * Enter the message that should be sent in this email.
         */
        message?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: number;
  form: number | Form;
  submissionData?:
    | {
        field: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  /**
   * All fields submitted with this form
   */
  dynamicFields?:
    | {
        fieldName?: string | null;
        fieldLabel?: string | null;
        fieldValue?: string | null;
        fieldType?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Human-readable summary of all submitted data
   */
  submissionSummary?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'forms';
        value: number | Form;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: number | FormSubmission;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        card?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  metaTitle?: T;
  metaDescription?: T;
  content?:
    | T
    | {
        hero?:
          | T
          | {
              title?: T;
              subtitle?: T;
              backgroundImage?: T;
              id?: T;
              blockName?: T;
            };
        'trusted-by'?:
          | T
          | {
              preText?: T;
              highlightText?: T;
              postText?: T;
              subtitle?: T;
              logos?:
                | T
                | {
                    logo?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        features?:
          | T
          | {
              heading?: T;
              subheading?: T;
              features?:
                | T
                | {
                    title?: T;
                    description?: T;
                    iconType?: T;
                    iconUpload?: T;
                    iconUrl?: T;
                    lucideIcon?: T;
                    iconifyIcon?: T;
                    id?: T;
                  };
              backgroundColor?: T;
              id?: T;
              blockName?: T;
            };
        platform?:
          | T
          | {
              heading?: T;
              subheading?: T;
              animatedPlatforms?:
                | T
                | {
                    platform?: T;
                    id?: T;
                  };
              description?: T;
              platformIcons?:
                | T
                | {
                    platform?: T;
                    iconName?: T;
                    id?: T;
                  };
              deviceImage?: T;
              animationSpeed?: T;
              backgroundColor?: T;
              id?: T;
              blockName?: T;
            };
        highlights?:
          | T
          | {
              heading?: T;
              subheading?: T;
              globalIcon?: T;
              highlights?:
                | T
                | {
                    title?: T;
                    description?: T;
                    id?: T;
                  };
              backgroundColor?: T;
              id?: T;
              blockName?: T;
            };
        testimonials?:
          | T
          | {
              heading?: T;
              subheading?: T;
              testimonials?:
                | T
                | {
                    quote?: T;
                    rating?: T;
                    authorName?: T;
                    authorTitle?: T;
                    company?: T;
                    id?: T;
                  };
              backgroundColor?: T;
              id?: T;
              blockName?: T;
            };
        'book-demo'?:
          | T
          | {
              heading?: T;
              description?: T;
              features?:
                | T
                | {
                    title?: T;
                    description?: T;
                    iconType?: T;
                    iconUpload?: T;
                    iconUrl?: T;
                    lucideIcon?: T;
                    iconifyIcon?: T;
                    id?: T;
                  };
              formHeading?: T;
              form?: T;
              backgroundColor?: T;
              id?: T;
              blockName?: T;
            };
        'form-block'?:
          | T
          | {
              form?: T;
              enableAjax?: T;
              id?: T;
              blockName?: T;
            };
        footer?:
          | T
          | {
              mainHeading?: T;
              ctaButton?:
                | T
                | {
                    text?: T;
                    url?: T;
                  };
              socialLinks?:
                | T
                | {
                    heading?: T;
                    links?:
                      | T
                      | {
                          platform?: T;
                          url?: T;
                          id?: T;
                        };
                  };
              contactInfo?:
                | T
                | {
                    heading?: T;
                    email?: T;
                    phone?: T;
                    address?: T;
                  };
              footerBottom?:
                | T
                | {
                    copyrightText?: T;
                    designCredit?: T;
                  };
              backgroundColor?: T;
              id?: T;
              blockName?: T;
            };
      };
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  fields?:
    | T
    | {
        checkbox?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              defaultValue?: T;
              id?: T;
              blockName?: T;
            };
        country?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        email?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        message?:
          | T
          | {
              message?: T;
              id?: T;
              blockName?: T;
            };
        number?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        select?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              placeholder?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              required?: T;
              id?: T;
              blockName?: T;
            };
        state?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        text?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        textarea?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
      };
  submitButtonLabel?: T;
  confirmationType?: T;
  confirmationMessage?: T;
  redirect?:
    | T
    | {
        url?: T;
      };
  emails?:
    | T
    | {
        emailTo?: T;
        cc?: T;
        bcc?: T;
        replyTo?: T;
        emailFrom?: T;
        subject?: T;
        message?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  form?: T;
  submissionData?:
    | T
    | {
        field?: T;
        value?: T;
        id?: T;
      };
  dynamicFields?:
    | T
    | {
        fieldName?: T;
        fieldLabel?: T;
        fieldValue?: T;
        fieldType?: T;
        id?: T;
      };
  submissionSummary?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "navbar".
 */
export interface Navbar {
  id: number;
  logo: number | Media;
  links?:
    | {
        label: string;
        url: string;
        id?: string | null;
      }[]
    | null;
  ctaLabel: string;
  ctaUrl: string;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "navbar_select".
 */
export interface NavbarSelect<T extends boolean = true> {
  logo?: T;
  links?:
    | T
    | {
        label?: T;
        url?: T;
        id?: T;
      };
  ctaLabel?: T;
  ctaUrl?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}